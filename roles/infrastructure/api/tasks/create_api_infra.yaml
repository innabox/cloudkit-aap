- name: Get kube-apiserver service
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Service
    namespace: "{{ hosted_cluster_namespace }}-{{ hosted_cluster_name }}"
    name: kube-apiserver
  register: kube_apiserver_service

  # wait until the service exists and has a loadbalancer ip
  until: >-
    kube_apiserver_service.resources and
    kube_apiserver_service.resources[0].status.loadBalancer.ingress | default(false)
  retries: "{{ kube_apiserver_wait_retries | default(infrastructure_resource_wait_retries) }}"
  delay: "{{ kube_apiserver_wait_delay | default(infrastructure_resource_wait_delay) }}"

- name: Set api_internal_ip
  ansible.builtin.set_fact:
    api_internal_ip: "{{ kube_apiserver_service.resources[0].status.loadBalancer.ingress[0].ip }}"

- name: Allocate api floating ip
  ansible.builtin.include_role:
    name: infrastructure
    tasks_from: allocate_floating_ip
  vars:
    floating_ip_name: "{{ hosted_cluster_name }}-api"  # noqa:var-naming[no-role-prefix]

- name: Set api_floating_ip
  ansible.builtin.set_fact:
    api_floating_ip: "{{ allocate_floating_ip_result }}"

# FIXME: This will fail erroneously because the command is not idempotent;
# see https://github.com/CCI-MOC/python-esiclient/issues/82. Unfortunately,
# it will also fail legitimately if we failed to clean up from a previous
# cluster and there exists a port forwarding to the same internal ip
# address.
- name: Create port forwarding  # noqa:no-changed-when
  ansible.builtin.command: >-
    openstack esi port forwarding create {{ api_internal_ip }} {{ api_floating_ip }}
      --internal-ip-network "{{ api_internal_ip_network }}"
      -p {{ api_kube_apiserver_port }} -d "{{ hosted_cluster_name }}" -f json
  register: create_forwarding
  failed_when: >-
    create_forwarding.rc != 0 and "duplicate port forwarding" not in create_forwarding.stderr

- name: Create dns record
  amazon.aws.route53:
    state: present
    zone: "{{ hosted_cluster_settings.base_domain }}"
    record: "api.{{ hosted_cluster_name }}.{{ hosted_cluster_settings.base_domain }}"
    type: A
    ttl: "{{ infrastructure_dns_ttl }}"
    value: "{{ api_floating_ip }}"
    wait: true
    overwrite: true
