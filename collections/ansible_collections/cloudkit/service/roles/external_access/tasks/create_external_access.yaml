- name: Get kube-apiserver service
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Service
    namespace: "{{ external_access_namespace }}-{{ external_access_name }}"
    name: kube-apiserver
  register: kube_apiserver_service

  # wait until the service exists and has a loadbalancer ip
  until: >-
    kube_apiserver_service.resources and
    kube_apiserver_service.resources[0].status.loadBalancer.ingress | default(false)
  retries: "{{ external_access_resource_wait_retries }}"
  delay: "{{ external_access_resource_wait_delay }}"

- name: Set api_internal_ip
  ansible.builtin.set_fact:
    external_access_api_internal_ip: "{{ kube_apiserver_service.resources[0].status.loadBalancer.ingress[0].ip }}"
    external_access_kube_apiserver_port: "{{ kube_apiserver_service.resources[0].spec.ports[0].port }}"

- name: Allocate api floating ip
  ansible.builtin.include_role:
    name: massopencloud.esi.floating_ip
  vars:
    floating_ip_state: present
    floating_ip_name: "{{ external_access_name }}-api"  # noqa:var-naming[no-role-prefix]

- name: Set api_floating_ip
  ansible.builtin.set_fact:
    external_access_api_floating_ip: "{{ allocate_floating_ip_result }}"

- name: Create port forwarding for api endpoint  # noqa:no-changed-when
  ansible.builtin.include_role:
    name: massopencloud.esi.floating_ip
    tasks_from: create_port_forwarding
  vars:
    internal_ip: "{{ external_access_api_internal_ip }}"
    floating_ip: "{{ external_access_api_floating_ip }}"
    internal_network: "{{ external_access_api_internal_network }}"
    ports:
    - "{{ external_access_kube_apiserver_port }}"
    description: "{{ external_access_name }}-api"

- name: Create api dns records
  when: >-
    external_access_base_domain in external_access_supported_base_domains|default([])
  amazon.aws.route53:
    state: present
    zone: "{{ external_access_base_domain }}"
    record: "{{ item }}"
    type: A
    ttl: "{{ external_access_dns_ttl }}"
    value: "{{ external_access_api_floating_ip }}"
    wait: true
    overwrite: true
  loop:
  - "api.{{ external_access_name }}.{{ external_access_base_domain }}"
  - "api-int.{{ external_access_name }}.{{ external_access_base_domain }}"

- name: Allocate ingress floating ip
  ansible.builtin.include_role:
    name: massopencloud.esi.floating_ip
  vars:
    floating_ip_state: present
    floating_ip_name: "{{ external_access_name }}-ingress"  # noqa:var-naming[no-role-prefix]

- name: Set external_access_ingress_floating_ip
  ansible.builtin.set_fact:
    external_access_ingress_floating_ip: "{{ allocate_floating_ip_result }}"

- name: Create ingress dns record
  amazon.aws.route53:
    state: present
    zone: "{{ external_access_base_domain }}"
    record: "*.apps.{{ external_access_name }}.{{ external_access_base_domain }}"
    type: A
    ttl: "{{ external_access_dns_ttl }}"
    value: "{{ external_access_ingress_floating_ip }}"
    wait: true
    overwrite: true

- name: Get managed cluster admin kubeconfig secret
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    namespace: "{{ cluster_working_namespace }}"
    name: "{{ cluster_order.metadata.name }}-admin-kubeconfig"
  register: managed_cluster_admin_kubeconfig_secret

- name: Extract managed cluster kubeconfig
  ansible.builtin.set_fact:
    managed_cluster_admin_kubeconfig: "{{ managed_cluster_admin_kubeconfig_secret.resources[0].data.kubeconfig | b64decode | from_yaml }}"

- name: Wait until cluster is available
  kubernetes.core.k8s_info:
    api_version: config.openshift.io/v1
    kind: ClusterOperator
    name: network
    kubeconfig: "{{ managed_cluster_admin_kubeconfig }}"
  register: network_cluster_operator

  # wait until cluster network operator is available
  until: >-
    network_cluster_operator.resources[0]|json_query("status.conditions[?type=='Available'].status")|default(["False"])|first == "True"
  retries: "{{ external_access_resource_wait_retries }}"
  delay: "{{ external_access_resource_wait_delay }}"

- name: Set ingress_internal_subnet_name
  ansible.builtin.set_fact:
    ingress_internal_subnet_name: "subnet-{{ external_access_name }}"

- name: Get ingress internal subnet
  ansible.builtin.include_role:
    name: massopencloud.esi.l3
    tasks_from: get_subnet
  vars:
    subnet_name: "{{ ingress_internal_subnet_name }}"

- name: Set external_access_metallb_ingress_ip
  ansible.builtin.set_fact:
    external_access_metallb_ingress_ip: "{{ subnet_info.cidr | ansible.utils.nthhost(-10) }}"

- name: Configure metallb for ingress
  ansible.builtin.include_role:
    name: metallb_ingress
    tasks_from: configure_metallb_ingress
  vars:
    metallb_ingress_admin_kubeconfig: "{{ managed_cluster_admin_kubeconfig }}"
    metallb_ingress_ip: "{{ external_access_metallb_ingress_ip }}"

- name: Create port forwarding for ingress endpoint  # noqa:no-changed-when
  ansible.builtin.include_role:
    name: massopencloud.esi.floating_ip
    tasks_from: create_port_forwarding
  vars:
    internal_ip: "{{ external_access_metallb_ingress_ip }}"
    floating_ip: "{{ external_access_ingress_floating_ip }}"
    internal_network: "{{ external_access_ingress_internal_network }}"
    ports:
    - "80"
    - "443"
    description: "{{ external_access_name }}-ingress"
