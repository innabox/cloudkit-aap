- name: Get list of existing VM templates
  ansible.builtin.uri:
    url: "{{ publish_templates_vm_api_endpoint }}"
    validate_certs: "{{ publish_templates_validate_certs | default(true) | bool }}"
    headers:
      authorization: Bearer {{ cloudkit_fulfillment_service_token }}
  register: vm_template_check

- name: Create list of existing VM template IDs
  ansible.builtin.set_fact:
    vm_template_ids: >-
      {{
      vm_template_check | json_query("json.items[].id")
      }}
  when: vm_template_check is success and vm_template_check.json.size > 0

- name: Update existing VM template
  loop: "{{ cloudkit_vm_templates }}"
  loop_control:
    label: "{{ template.id }}"
    loop_var: template
  when: vm_template_ids is defined and template.id in vm_template_ids
  ansible.builtin.uri:
    url: "{{ publish_templates_vm_api_endpoint }}/{{ template.id }}"
    validate_certs: "{{ publish_templates_validate_certs | default(true) | bool }}"
    method: PATCH
    headers:
      authorization: Bearer {{ cloudkit_fulfillment_service_token }}
    body_format: json
    body: "{{ template }}"

- name: Create new VM template
  loop: "{{ cloudkit_vm_templates }}"
  loop_control:
    label: "{{ template.id }}"
    loop_var: template
  when: vm_template_ids is not defined or template.id not in vm_template_ids
  ansible.builtin.uri:
    url: "{{ publish_templates_vm_api_endpoint }}"
    validate_certs: "{{ publish_templates_validate_certs | default(true) | bool }}"
    method: POST
    headers:
      authorization: Bearer {{ cloudkit_fulfillment_service_token }}
    body_format: json
    body: "{{ template }}"
