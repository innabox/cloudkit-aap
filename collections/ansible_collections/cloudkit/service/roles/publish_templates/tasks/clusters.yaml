- name: Get list of existing cluster templates
  ansible.builtin.uri:
    url: "{{ publish_templates_cluster_api_endpoint }}"
    validate_certs: "{{ publish_templates_validate_certs | default(true) | bool }}"
    headers:
      authorization: Bearer {{ cloudkit_fulfillment_service_token }}
  register: cluster_template_check

- name: Create list of existing cluster template template ids    # noqa: jinja[invalid]
  ansible.builtin.set_fact:
    cluster_template_ids: >-
      {{
      cluster_template_check | json_query("json.items[].id")
      }}
  when: cluster_template_check is success and cluster_template_check.json.size > 0

- name: Update existing cluster template
  loop: "{{ cloudkit_cluster_templates }}"
  loop_control:
    label: "{{ template.id }}"
    loop_var: template
  when: cluster_template_ids is defined and template.id in cluster_template_ids
  ansible.builtin.uri:
    url: "{{ publish_templates_cluster_api_endpoint }}/{{ template.id }}"
    validate_certs: "{{ publish_templates_validate_certs | default(true) | bool }}"
    method: PATCH
    headers:
      authorization: Bearer {{ cloudkit_fulfillment_service_token }}
    body_format: json
    body: "{{ template }}"

- name: Create new cluster template
  loop: "{{ cloudkit_cluster_templates }}"
  loop_control:
    label: "{{ template.id }}"
    loop_var: template
  when: cluster_template_ids is not defined or template.id not in cluster_template_ids
  ansible.builtin.uri:
    url: "{{ publish_templates_cluster_api_endpoint }}"
    validate_certs: "{{ publish_templates_validate_certs | default(true) | bool }}"
    method: POST
    headers:
      authorization: Bearer {{ cloudkit_fulfillment_service_token }}
    body_format: json
    body: "{{ template }}"
