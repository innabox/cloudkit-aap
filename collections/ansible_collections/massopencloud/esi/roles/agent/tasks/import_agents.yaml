- name: Display node names that will be added as agents
  ansible.builtin.debug:
    var: node_names

- name: Get list of existing agents
  kubernetes.core.k8s_info:
    kind: Agent
    api_version: agent-install.openshift.io/v1beta1
    namespace: "{{ agent_namespace }}"
  register: esi_initial_agents

- name: Initialize esi_node_info_list and esi_node_addresses_list
  ansible.builtin.set_fact:
    esi_node_info_list: []
    esi_node_addresses_list: []

- name: Get node informations
  ansible.builtin.command: >
    openstack baremetal node show {{ node_name }} -f json
  register: esi_node_info_raw
  changed_when: true
  loop: "{{ node_names }}"
  loop_control:
    loop_var: node_name

- name: Unmarshal node informations
  ansible.builtin.set_fact:
    esi_node_info_list: "{{ esi_node_info_raw.results | map(attribute='stdout') | map('from_json') | list }}"

- name: Get MAC addresses of nodes
  ansible.builtin.command: >
    openstack baremetal port list --node {{ node_name }} -f json
  register: port_list_raw
  changed_when: true
  loop: "{{ node_names }}"
  loop_control:
    loop_var: node_name

- name: Extract MAC addresses
  ansible.builtin.set_fact:
    esi_node_addresses_list: "{{ port_list_raw.results | map(attribute='stdout') | map('from_json') | map('map', attribute='Address') | map('list') | list }}"

- name: Initialize filtered lists of only nodes that need importing
  ansible.builtin.set_fact:
    filtered_node_names: []
    filtered_node_info: []
    filtered_node_addresses: []

- name: Set filtered lists of only nodes that need importing
  ansible.builtin.set_fact:
    filtered_node_names: "{{ filtered_node_names + [node_names[node_idx]] }}"
    filtered_node_info: "{{ filtered_node_info + [esi_node_info_list[node_idx]] }}"
    filtered_node_addresses: "{{ filtered_node_addresses + [esi_node_addresses_list[node_idx]] }}"
  loop: "{{ range(node_names | length) | list }}"
  loop_control:
    loop_var: node_idx
  when: not esi_node_addresses_list[node_idx] | massopencloud.esi.match_agent_addresses(esi_initial_agents.resources)

- name: Get InfraEnv information
  kubernetes.core.k8s_info:
    kind: InfraEnv
    api_version: agent-install.openshift.io/v1beta1
    namespace: "{{ agent_namespace }}"
    name: "{{ agent_infraenv_name }}"
  register: esi_infraenv

- name: Set esi_discovery_url
  ansible.builtin.set_fact:
    esi_discovery_url: "{{ esi_infraenv.resources[0].status.isoDownloadURL }}"
  when: not esi_discovery_url|default(false)

- name: Detach all networks from nodes
  ansible.builtin.command: >
    openstack esi node network detach --all {{ node_name }}
  register: detach_cmd
  failed_when: detach_cmd.rc != 0 and "is not associated with any port" not in detach_cmd.stderr
  changed_when: true
  loop: "{{ filtered_node_names }}"
  loop_control:
    loop_var: node_name

- name: Attach nodes to provisioning network
  ansible.builtin.command: >
    openstack esi node network attach --network {{ agent_provisioning_network_name }} {{ node_name }}
  changed_when: true
  loop: "{{ filtered_node_names }}"
  loop_control:
    loop_var: node_name

- name: Set deploy interface and boot image url
  ansible.builtin.command: >
    openstack baremetal node set {{ node_name }}
      --instance-info deploy_interface=ramdisk
      --instance-info boot_iso="{{ esi_discovery_url }}"
  changed_when: true
  loop: "{{ filtered_node_names }}"
  loop_control:
    loop_var: node_name

- name: Deploy nodes
  ansible.builtin.command: >
    openstack baremetal node deploy {{ node_name }}
  changed_when: true
  loop: "{{ filtered_node_names }}"
  loop_control:
    loop_var: node_name

- name: Wait for nodes to register as an agent
  kubernetes.core.k8s_info:
    kind: Agent
    api_version: agent-install.openshift.io/v1beta1
    namespace: "{{ agent_namespace }}"
  register: esi_final_agents
  until: >
    filtered_node_addresses |
    map('massopencloud.esi.match_agent_addresses', esi_final_agents.resources) |
    reject('none') |
    list |
    length == (filtered_node_addresses | length)
  retries: 90
  delay: 10

- name: Get agent names
  ansible.builtin.set_fact:
    esi_agent_names: >-
      {{
        filtered_node_addresses |
        map('massopencloud.esi.match_agent_addresses', esi_final_agents.resources) |
        list
      }}

- name: Display the node names that were imported as agents
  ansible.builtin.debug:
    msg: "Imported {{ node_names[node_idx] }} as agent {{ esi_agent_names[node_idx] }}"
  loop: "{{ range(node_names | length) | list }}"
  loop_control:
    loop_var: node_idx

- name: Extract topology from all node names
  ansible.builtin.set_fact:
    esi_agent_topology_labels_list: >-
      {{ esi_agent_topology_labels_list | default([]) + [filtered_node_name | massopencloud.esi.extract_esi_location] }}
  loop: "{{ filtered_node_names }}"
  loop_control:
    loop_var: filtered_node_name

- name: Create topology labels for all nodes
  ansible.builtin.set_fact:
    esi_agent_topology_labels_list: >-
      {{ esi_agent_topology_labels_list | default([]) + [topology_labels] }}
  vars:
    topology_labels: |-
      {% filter from_yaml %}
      {% for label, val in esi_agent_topology.items() %}
        {{ agent_topology_label_namespace }}/{{ label }}: "{{ val }}"
      {% endfor %}
      {% endfilter %}
  loop: "{{ esi_agent_topology_labels_list }}"
  loop_control:
    loop_var: esi_agent_topology

- name: Create resource class labels for all nodes
  ansible.builtin.set_fact:
    esi_agent_resource_class_labels_list: >-
      {{ esi_agent_resource_class_labels_list | default([]) + [{'esi.nerc.mghpcc.org/resource_class': filtered_node_info[node_idx].resource_class}] }}
  loop: "{{ range(filtered_node_names | length) | list }}"
  loop_control:
    loop_var: node_idx

- name: Configure agent metadata for all nodes
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: agent-install.openshift.io/v1beta1
      kind: Agent
      metadata:
        name: "{{ esi_agent_names[node_idx] }}"
        namespace: "{{ agent_namespace }}"
        annotations: "{{ {agent_node_uuid_annotation: filtered_node_info[node_idx].uuid} }}"
        labels: "{{ (esi_agent_topology_labels_list[node_idx] | from_yaml) | combine(esi_agent_resource_class_labels_list[node_idx]) }}"
      spec:
        approved: true
        hostname: "{{ filtered_node_names[node_idx] | lower }}"
  loop: "{{ range(esi_agent_names | length) | list }}"
  loop_control:
    loop_var: node_idx
